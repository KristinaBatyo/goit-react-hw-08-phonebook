{"version":3,"file":"static/js/729.3b5aa885.chunk.js","mappings":"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","sources":["components/list/ContactsList.styled.jsx","../node_modules/nanoid/index.browser.js","redux/selectors.js","components/list/ContactsList.jsx","components/form/ContactsForm.styled.jsx","components/form/ContactsForm.jsx","components/filter/Filter.styled.jsx","components/filter/Filter.jsx","components/contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\n\nexport const ContactsList = styled.ul`\n    margin: 0 auto;\n    background-color: #fff;\n    margin-top: 20px;\n`;\nexport const ContactsItem = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 20px;\n    border-bottom: 1px solid #f5f5f5;\n    &:last-child {\n        border-bottom: none;\n    }\n`;\nexport const ContactsTitle = styled.h2`\n    font-size: 20px;\n    font-weight: 500;\n    margin: 10px;\n`;\nexport const DeleteButton = styled.button`\n    width: 100px;\n    padding: 5px;\n    height: 30px;\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);\n    border: none;\n    cursor: pointer;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus {\n        background-color: #f5f5f5;\n        transform: scale(1.03);\n        outline: none;\n`;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts = state => state.contacts.items;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filters;\n","import {\n  ContactsList,\n  ContactsItem,\n  ContactsTitle,\n  DeleteButton,\n} from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { setDeleteContacts } from '../../redux/contacts';\nimport { nanoid } from 'nanoid';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { deleteContacts } from 'redux/operations';\n\nconst ContactsListRender = () => {\n  const contacts = useSelector(getContacts);\n  const filters = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  function onDelete(index) {\n    dispatch(deleteContacts(index));\n  }\n  function hendleFind() {\n    const normalizedFilter = filters.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n\n  const contactsData = hendleFind();\n  return (\n    <ContactsList>\n      {contactsData.map(({ name, number, id }, index) => (\n        <ContactsItem key={nanoid()}>\n          <ContactsTitle>{name}</ContactsTitle>\n          <ContactsTitle>{number}</ContactsTitle>\n          <DeleteButton onClick={() => onDelete(id)} key={index}>\n            Delete\n          </DeleteButton>\n        </ContactsItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactsListRender;","import styled from '@emotion/styled';\n\nexport const ContactsContainer = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    max-width: 500px;\n    margin: 20px auto;\n`;\n\n\nexport const ContactsLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    font-size: 20px;\n    font-weight: 500;\n    margin-bottom: 20px;\n`;\n\n\n\nexport const ContactsButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 20px;\n    width: 100px;\n    height: 30px;\n    margin-left: 20px;\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);\n    border: none;\n    cursor: pointer;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover,\n    &:focus {\n        background-color: #f5f5f5;\n        transform: scale(1.03);\n        outline: none;\n    }\n\n`;\n\nexport const ContactsInput = styled.input`\nwidth: 300px;\npadding: 5px;\nborder: 1px solid #000;\nborder-radius: 5px;\nbox-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);\n&:focus {\n    outline: none;\n}\n`;\n\n\n","import { ContactsContainer, ContactsLabel, ContactsButton, ContactsInput} from './ContactsForm.styled.jsx';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { addContacts } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\n\n\nconst  ContactsForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n        \n        function hendleChange (e) {\n            const { name, value } = e.currentTarget;\n                switch (name) {\n                    case 'name':\n                    setName(value);\n                    break;\n                    case 'number':\n                    setNumber(value);\n                    break;\n                    default:\n                    return;\n                }\n        }\n        function hendleSubmit(event) {\n            event.preventDefault();\n            if (\n            contacts.find(\n                contact => contact.name.toLowerCase() === name.toLowerCase()\n            )\n            ) {\n            return alert(`${name} is already in contacts.`);\n            }\n            dispatch(addContacts({ name, number }));\n            reset();\n        }\n\n        function reset() {\n        setName('');\n        setNumber('');\n        }\n\n        return (\n          <ContactsContainer onSubmit={hendleSubmit}>\n            <ContactsLabel>\n              Name\n              <ContactsInput\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={hendleChange}\n                value={name}\n                id={nanoid()}\n              />\n            </ContactsLabel>\n            <ContactsLabel>\n              Number\n              <ContactsInput\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                value={number}\n                onChange={hendleChange}\n              />\n            </ContactsLabel>\n            <ContactsButton type=\"submit\">Add Contact</ContactsButton>\n          </ContactsContainer>\n        );\n        }\n\n\nexport default ContactsForm;\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\ndispay: flex;\nfont-size: 20px;\nfont-weight: 500;\nmargin: 10px;\n`\nexport const FilterText = styled.div`\n\nfont-size: 20px;\nfont-weight: 500;\n\n`\n\nexport const FilterInput = styled.input`\nwidth: 300px;\npadding: 5px;\nborder: 1px solid #000;\nborder-radius: 5px;\nbox-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);\n&:focus {\n    outline: none;\n}\n`;\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setStatusFilter } from '../../redux/filters';\nimport { FilterText, FilterContainer, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n    const filter = useSelector(state => state.filter);\n    const dispatch = useDispatch();\n\n    function hendleFilter(event) {\n        const { value } = event.target;\n        dispatch(setStatusFilter(value));\n    }\n    return (\n        <FilterContainer>\n        <FilterText>Find contacts by name</FilterText>\n        <FilterInput\n            type=\"search\"\n            name=\"filter\"\n            value={filter}\n            onChange={hendleFilter}\n        />\n    </FilterContainer>\n    );\n};\nexport default Filter;\n","import ContactsListRender from '../list/ContactsList';\nimport ContactsForm from 'components/form/ContactsForm';\nimport Filter from 'components/filter/Filter';\nimport { Title } from 'components/app/App.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { getLoading, getError, getContacts } from 'redux/selectors';\n\n const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n      <>\n        <Title>Phonebook</Title>\n        <ContactsForm />\n        <Title>Contacts</Title>\n        <Filter />\n        {isLoading && <p>Loading tasks...</p>}\n        {error && <p>{error}</p>}\n        {contacts.length > 0 && <ContactsListRender />}\n      </>\n  );\n };\n\nexport default Contacts;\n"],"names":["ContactsList","styled","ContactsItem","ContactsTitle","DeleteButton","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","state","contacts","items","getLoading","isLoading","getError","error","getFilter","filters","useSelector","dispatch","useDispatch","contactsData","normalizedFilter","toLowerCase","filter","contact","name","includes","hendleFind","map","index","number","onClick","deleteContacts","onDelete","ContactsContainer","ContactsLabel","ContactsButton","ContactsInput","useState","setName","setNumber","hendleChange","e","currentTarget","value","onSubmit","event","preventDefault","find","alert","addContacts","type","pattern","title","required","onChange","FilterContainer","FilterText","FilterInput","target","setStatusFilter","useEffect","fetchContacts","length"],"sourceRoot":""}